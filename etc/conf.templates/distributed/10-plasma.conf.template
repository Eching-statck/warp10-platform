//
//   Copyright 2019-2023  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

/////////////////////////////////////////////////////////////////////////////////////////
//
// P L A S M A
//
/////////////////////////////////////////////////////////////////////////////////////////

###
### M A N D A T O R Y   C O N F I G U R A T I O N
###

##
## MANDATORY (backend) - Comma separated list of Kafka brokers to connect to for consuming the data messages
##
plasma.backend.kafka.in.consumer.bootstrap.servers = ${kafka.data.bootstrap.servers}

##
## MANDATORY (backend) - Kafka topic to use for consuming data messages
##
plasma.backend.kafka.in.topic = ${kafka.data.topic}

##
## MANDATORY (backend) - Kafka group id with which to consume the in topic
##
plasma.backend.kafka.in.groupid = plasmabeIn-1

##
## MANDATORY (backend) - Delay (in ms) between synchronization for offset commit
##
plasma.backend.kafka.in.commitperiod = 1000

##
## MANDATORY (backend) - Number of threads to run for reading off of Kafka
##
plasma.backend.kafka.in.nthreads = 2

##
## MANDATORY (backend) - Comma separated list of Kafka brokers to connect to for producing messages for the frontends
##
plasma.backend.kafka.out.producer.bootstrap.servers = ${kafka.plasmafe.bootstrap.servers}

##
## MANDATORY (backend) - ZooKeeper Quorum for the ZK ensemble to use for retrieving subscriptions
##
plasma.backend.subscriptions.zk.quorum = ${zk.quorum}

##
## MANDATORY (backend) - Parent znode under which subscription znodes will be created
##
plasma.backend.subscriptions.zk.znode = /zk/warp/${warp10.instance}/plasma

##
## MANDATORY (frontend) - Comma separated list of Kafka brokers to connect to for consuming messages from backends
##
plasma.frontend.kafka.consumer.bootstrap.servers = ${kafka.plasmafe.bootstrap.servers}

##
## MANDATORY (frontend) - Kafka topic to consume. This topic is dedicated to this Plasma frontend.
## One topic per instance of plasma frontend.
##
plasma.frontend.kafka.topic = plasmafe1

##
## MANDATORY (frontend) - Kafka groupid under which to consume above topic
##
plasma.frontend.kafka.groupid = plasmafe-1

##
## MANDATORY (frontend) - How often (in ms) to commit Kafka offsets
##
plasma.frontend.kafka.commitperiod = 1000

##
## MANDATORY (frontend) - Number of threads used for consuming Kafka topic
##
plasma.frontend.kafka.nthreads = 2

##
## MANDATORY (frontend) - Host/IP on which to bind
##
plasma.frontend.host = 127.0.0.1

##
## MANDATORY (frontend) - Port on which to listen
##
plasma.frontend.port = 8884

##
## MANDATORY (frontend) - Maximum size of each znode (in bytes)
##
plasma.frontend.maxznodesize = 100000

##
## MANDATORY (frontend) - ZooKeeper connect String for subscription
##
plasma.frontend.zk.quorum = ${zk.quorum}

##
## MANDATORY (frontend) - ZooKeeper root znode for subscriptions
##
plasma.frontend.zk.znode = /zk/warp/${warp10.instance}/plasma

##
## MANDATORY (frontend) - How often (in ms) to pause between checking if we need to update the subscriptions
##
plasma.frontend.subscribe.delay = 5000

##
## MANDATORY (frontend) - Number of Jetty acceptors
##
plasma.frontend.acceptors = 2

##
## MANDATORY (frontend) - Number of Jetty selectors
##
plasma.frontend.selectors = 4

##
## MANDATORY (frontend) - Jetty idle timeout (in ms)
##
plasma.frontend.idle.timout = 300000

###
### O P T I O N A L   C O N F I G U R A T I O N
###
### Values shown are the default when they exist
###

//
// Maximum number of Geo Time Series a single Plasma session can subscribe to
//
#warp.plasma.maxsubs

##
## 128/192/256 bits AES key for encrypting frontend messages in Kafka.
## Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
##
#plasma.frontend.kafka.aes = hex:hhhhhh...

##
## Number of threads in Jetty's Thread Pool - defaults to 200
##
#plasma.frontend.jetty.threadpool = 200
  
##
## Maximum size of Jetty ThreadPool queue size (unbounded by default)
##
#plasma.frontend.jetty.maxqueuesize = 

##
## TCP Backlog applied to the ingress server listener
##
#plasma.frontend.tcp.backlog =

##
## Max message size for the Plasma Frontend Websocket
##
plasma.frontend.websocket.maxmessagesize = 1048576

##
## 128 bits SipHash key for computing MACs. Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
##
#plasma.frontend.kafka.mac = hex:hhhhhh...

##
## 128 bits SipHash key for computing MACs. Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
##
#plasma.backend.kafka.in.mac = ${kafka.data.mac}

##
## 128/192/256 bits AES key for encrypting backend messages in Kafka.
## Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
##
#plasma.backend.kafka.in.aes = ${kafka.data.aes}

##
## Maximum size of Kafka outward messages
##
#plasma.backend.kafka.out.maxsize = 900000

##
## 128 bits SipHash key for computing MACs. Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
##
#plasma.backend.kafka.out.mac = hex:hhhhhh...

##
## 128/192/256 bits AES key for encrypting backend messages in Kafka.
## Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
##
#plasma.backend.kafka.out.aes = hex:hhhhhh...


##
## Kafka client id to use for the consumer of the backend data
##
#plasma.frontend.kafka.consumer.clientid =

##
## Kafka client id to use for the consumer of the backend data
##
#plasma.backend.kafka.in.consumer.clientid =

##
## Kafka client id to use for the data producer towards the frontends
##
#plasma.backend.kafka.out.producer.clientid =

##
## Name of partition assignment strategy to use
##
#plasma.backend.kafka.in.consumer.partition.assignment.strategy =

##
## Name of partition assignment strategy to use
##
#plasma.frontend.kafka.consumer.partition.assignment.strategy =
