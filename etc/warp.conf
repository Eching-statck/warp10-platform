warpfleet.macros.repos = http://127.0.0.1:8001/
warpfleet.macros.ttl = 600000
warpfleet.macros.ttl.failed = 5000
warpfleet.macros.validator = warpfleet/validator


warpscript.extension.rexec = io.warp10.script.ext.rexec.RexecWarpScriptExtension

warpscript.rexec.endpoint.patterns = .*senx.io

warpscript.extension.s3=io.warp10.script.ext.s3.S3WarpScriptExtension

warp10.plugins=io.warp10.plugins.warpstudio.WarpStudioPlugin
warpstudio.host=127.0.0.1
warpstudio.port=8082

py4j.warpscript.python = true
#warp10.plugin.py4j = io.warp10.plugins.py4j.Py4JWarp10Plugin2
warp10.plugin.trace=io.warp10.script.ext.trace.TraceWarp10Plugin
trace.host = 127.0.0.1
trace.port = 22222
trace.tcp.port = 33333

warpscript.maxloop = 1000000

warpscript.extension.trace=io.warp10.script.ext.trace.TraceWarpScriptExtension
warpscript.extension.compiler=io.warp10.script.ext.compiler.CompilerWarpScriptExtension

#analytics.engine.only = true

warpscript.extension.leveldb=io.warp10.script.ext.leveldb.LevelDBWarpScriptExtension
leveldb.secret=hello

warpscript.extension.token=io.warp10.script.ext.token.TokenWarpScriptExtension
leveldb.data.syncrate = 1.0
standalone.max.delete.batchsize = 100
runner.runatstartup = false

#warp10.plugin.zeppelin = io.warp10.plugins.zeppelin.ZeppelinWarp10Plugin
#zeppelin.interpreter.localRepo = /var/tmp

#warpscript.extension.pcap = io.warp10.script.ext.pcap.PCapWarpScriptExtension
warpscript.extension.jdbc = io.warp10.script.ext.jdbc.JDBCWarpScriptExtension
jdbc.driver.postgres = org.postgresql.Driver
#warpscript.extension.compiler = io.warp10.script.ext.compiler.CompilerWarpScriptExtension

standalone.max.encoder.size=100000

egress.clients.expose = true
warpscript.maxpixels = 1000000

warpscript.maxrecursion = 32
#warp10.plugin.authexample = io.warp10.plugins.authexample.AuthExampleWarp10Plugin
warpscript.extension.smrt=io.warp10.script.ext.smrt.SMRTWarpScriptExtension
warpscript.extension.ceval=io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension
warpscript.extension.shm=io.warp10.script.ext.shm.SharedMemoryWarpScriptExtension
#warpscript.extension.clustering=io.warp10.script.ext.clustering.ClusteringWarpScriptExtension
warpscript.namespace.io.warp10.script.ext.debug.DebugWarpScriptExtension = 
warpscript.extension.heatmap=io.warp10.script.ext.heatmap.HeatmapWarpScriptExtension

#warpscript.extension.polyglot=io.warp10.script.ext.polyglot.GroovyWarpScriptExtension
#warpscript.extension.js=io.warp10.script.ext.polyglot.JSWarpScriptExtension
#warpscript.extension.python=io.warp10.script.ext.polyglot.PythonWarpScriptExtension
#warpscript.extension.lua=io.warp10.script.ext.polyglot.LUAWarpScriptExtension
#warpscript.extension.ruby=io.warp10.script.ext.polyglot.RubyWarpScriptExtension
#warpscript.extension.r=io.warp10.script.ext.polyglot.RWarpScriptExtension

warpscript.extension.tsi=io.warp10.script.ext.tsi.TSIWarpScriptExtension

warpscript.defaultcl.io.warp10.script.ext.polyglot.RubyWarpScriptExtension=true
warpscript.defaultcl.io.warp10.script.ext.polyglot.LUAWarpScriptExtension=true
#warpscript.defaultcl.io.warp10.script.ext.polyglot.GroovyWarpScriptExtension=true
#warpscript.defaultcl.io.warp10.script.ext.polyglot.PythonWarpScriptExtension=true

shm.ttl = 120000
warpscript.maxfetch=10000000
warpscript.maxgeocells.hard = 100000
standalone.splits.enable=true
cors.headers = Authorization,X-Foo
ingress.parse.attributes = true
ingress.activity.window = 10000
ingress.activity.update = true
ingress.activity.meta = true

blobstore.directory = /var/tmp/blobstore

#warp10.plugins = io.warp10.plugins.influxdb.InfluxDBWarp10Plugin
#influxdb.warp10.endpoint = http://127.0.0.1:8080/api/v0/update

warp10.plugin.http = io.warp10.plugins.http.HTTPWarp10Plugin
http.dir = /var/tmp/http.dir
http.host = 127.0.0.1
http.port = 12345

#warp10.plugin.mqtt = io.warp10.plugins.mqtt.MQTTWarp10Plugin
mqtt.dir = /var/tmp/mqtt.dir
mqtt.period = 10000

#warp10.plugin.udp = io.warp10.plugins.udp.UDPWarp10Plugin
udp.dir = /var/tmp/udp.dir
udp.period = 10000

warpscript.interactive.tcp.port = 1234
warpscript.def.unshadow = false
warpscript.repository.directory = /var/tmp/macros
warpscript.repository.ttl.hard = 60000
warpscript.repository.refresh = 0
warpscript.repository.ondemand = true
warpscript.repository.ttl.failed = 10000

#datalog.dir = /var/tmp/standalone-datalog
datalog.id = datalog-0
datalog.psk = hex:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
datalog.onlylogshards = true
datalog.shardkey = true

warpscript.maxdepth.hard = 100000

warp.hash.wrappers = hex:01010101010101010101010101010101

##
## Parscanners
##
//
// Number of threads to use for scheduling parallel scanners. Use 0 to disable parallel scanners
//
standalone.parallelscanners.poolsize = 8

//
// Maximum number of parallel scanners per fetch request. Use 0 to disable parallel scanners.
//
standalone.parallelscanners.maxinflightperrequest = 4

//
// Minimum number of GTS to assign to a parallel scanner. If the number of GTS to fetch is below this limit, no
// parallel scanners will be spawned. Defaults to 4.
//
standalone.parallelscanners.min.gts.perscanner = 10

//
// Maximum number of parallel scanners to use when fetching datapoints for a batch of GTS (see EGRESS_FETCH_BATCHSIZE).
// Defaults to 16.
//
standalone.parallelscanners.max.parallel.scanners = 16


##
## IN MEMORY CONF
##
################################
#null=true
standalone.shards = 2:0,2:1
#pureplasma=true
#in.memory=true
in.memory.chunked = true
in.memory.chunk.count = 2
in.memory.chunk.length = 315360000000000
in.memory.load=/var/tmp/inmemory.dump
in.memory.dump=/var/tmp/inmemory.dump

#in.memory.depth = 36000000000000000

//
// High water mark in bytes. When memory goes above this threshold, attempts to remove expired datapoints will be
// done until consumed memory goes below the low water mark (see below) or no more expired datapoints can be found.
//
//in.memory.highwatermark = 

//
// Low water mark in bytes for garbage collection (see above)
//
//in.memory.lowwatermark = 

//
// If set to true, then only the last recorded value of a GTS is kept
//
//in.memory.ephemeral = 
################################


//warpscript.extension.tensorflow=io.warp10.script.ext.tensorflow.TensorFlowWarpScriptExtension
//warpscript.extensions=io.warp10.warp.sdk.DummyExt
//warpscript.extensions=WarpScriptTestExtension
warpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension
//warpscript.extension.blobstore=io.warp10.script.ext.blobstore.BlobStoreWarpScriptExtension
//warpscript.extension.grid=io.warp10.script.ext.grid.GridWarpScriptExtension
//warpscript.extensions=io.warp10.script.ext.egads.EGADSWarpScriptExtension
//warpscript.extension.s3=io.warp10.script.ext.s3.S3WarpScriptExtension
//warpscript.extensions=memcached.MemcachedWarpScriptExtension
//warpscript.extensions=memcached.MemcachedWarpScriptExtension
//warpscript.extension.ais=io.warp10.script.ext.ais.AISWarpScriptExtension

//
// Root directory where data will be stored
//

leveldb.home = /var/tmp/continuum-standalone2
leveldb.native.disable = false
leveldb.java.disable = true
standalone.snapshot.trigger = ${leveldb.home}/snapshot.trigger
standalone.snapshot.signal = ${leveldb.home}/snapshot.signal


//leveldb.home = /var/tmp/warp10

webcall.host.patterns = .*,!.*net.*$

warpscript.call.directory = /var/tmp
warpscript.call.maxcapacity = 1
warpscript.maxops = 100000000000
warpscript.maxgts = 400000
warpscript.maxloop.hard = 100000

//
// Leveldb options
//

// LevelDB cache size in bytes
leveldb.cache.size = 1000000000
// Compression type can be NONE or SNAPPY
//leveldb.compression.type = SNAPPY
leveldb.compression.type = NONE


//
// Host and port the service will listen on
//

#standalone.host = 127.0.0.1
standalone.host = 0.0.0.0
standalone.port = 8080

standalone.acceptors = 1
standalone.selectors = 4

//
// Time units of the platform
// ns means we store nanoseconds
// us means we store microseconds
// ms means we store milliseconds
//
warp.timeunits = us

//
// Token file
//

warp.token.file = /Users/hbs/workspace/warp10-platform/etc/warp.tokens

leveldb.metadata.aes = hex:1111111111111111111111111111111111111111111111111111111111111111

//
// Secret key for class ids
//

warp.hash.class = hex:88888888888888888888888888888888
warp.hash.labels = hex:99999999999999999999999999999999
warp.hash.index = hex:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
warp.hash.token = hex:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
warp.hash.app = hex:cccccccccccccccccccccccccccccccc
warp.aes.scripts = hex:dddddddddddddddddddddddddddddddd
warp.aes.metasets = hex:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee

//
// Encryption keys
//

warp.aes.token = hex:2222222222222222222222222222222222222222222222222222222222222222

warpscript.update.endpoint = http://127.0.0.1:8080/api/v0/update
warpscript.meta.endpoint = http://127.0.0.1:8080/api/v0/meta
warpscript.delete.endpoint = http://127.0.0.1:8080/api/v0/delete
warpscript.jars.directory = /var/tmp
//warpscript.jars.fromclasspath = true

throttling.manager.dir = /var/tmp/continuum.throttling
throttling.manager.mads.default = 10000000
throttling.manager.rate.default = 100000000.0

warp.trl.dir = /var/tmp/trl
warp.trl.scan.period = 10000
warp.trl.startup.delay = 30000

# [*] Max message size for the stream update websockets (default value in WS API: 65536)
ingress.websocket.maxmessagesize = 1048576

# [*] Max message size for the Plasma Frontend Websocket
plasma.frontend.websocket.maxmessagesize = 1048576

//
// Headers
//

http.header.webcall.uuid = X-Warp10-WebCall-UUID
http.header.elapsed = X-Warp10-Elapsed
http.header.error.line = X-Warp10-Error-Line
http.header.error.message = X-Warp10-Error-Message
http.header.token = X-Warp10-Token
http.header.token.META = X-Warp10-Token
http.header.token.UPDATE = X-Warp10-Token
http.header.token.DELETE = X-Warp10-Token
http.header.token.archive = X-Warp10-Archive-Token
http.header.now = X-Warp10-Now



warpscript.maxfetch = 10000000
warpscript.maxfetch.hard = 100000000000

//
// R U N N E R
//
/////////////////////////////////////////////////////////////////////////////////////////

//
// String uniquely identifying this instance of ScriptRunner
//
runner.id = runner-standalone-1
runner.endpoint = http://127.0.0.1:8080/api/v0/exec
#runner.psk = hex:11111111111111111111111111111111

//
// Roles of the ScriptRunner instance. Can either be 'standalone' or any combination of 'scheduler' and 'worker'.
//
runner.roles = standalone

//
// Root directory under which scripts to run reside. The scripts MUST have a '.mc2' extension
// and reside in subdirectories of this root directory whose name is the periodicity (in ms) at
// which to run them.
//
runner.root = /var/tmp/warpscripts

//
// Number of threads to use for running scripts.
//
runner.nthreads = 4

//
// How often (in ms) to scan RUNNER_ROOT for new scripts
//
runner.scanperiod = 60000

//
// Minimum period at which a script can be scheduled. Any script scheduled
// more often than that won't be run
//
runner.minperiod = 1000

//
// Geo Directory
//


