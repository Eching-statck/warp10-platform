import org.gradle.api.tasks.bundling.Jar

//
//   Copyright 2018-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

//
// Define WarpScript dependencies for the POM file generation
//
ext {
    // List of dependencies for Warpscript
    mc2DepsList = []

    // List of unique dependency names (index)
    mc2DepsIndex = [] as Set

    // List of dependencies required by Warpscript
    requiredLibsMc2 = [ 'libthrift', 'bcprov-jdk16', 'commons-io', 'commons-codec', 'commons-lang3', 'commons-math3',\
                        'compiler', 'core', 'curator-x-discovery', 'geoxplib', 'guava', 'hadoop-common', 'hadoop-mapreduce-client-core',\
                        'java-merge-sort','joda-time', 'jtransforms', 'jts', 'oss-client', 'sensision', 'slf4j-api', 'pyrolite',\
                        'jts2geojson', 'jackson-core', 'jackson-databind', 'jackson-annotations' ]
}

sourceSets {
    main {
        java {
            srcDir new File(project(':warp10').projectDir, "src/main/java")
            include 'io/warp10/Py4JEntryPoint.*'
            include 'io/warp10/SortedPathIterator.*'
            include 'io/warp10/SortedPathIterator$*'
            include 'io/warp10/WarpClassLoader.*'
            include 'io/warp10/json/**'
            include 'io/warp10/script/**'
            exclude 'io/warp10/script/ScriptRunner*.*'
            include 'io/warp10/CapacityExtractorOutputStream.*'
            include 'io/warp10/udf/**'
            include 'io/warp10/thrift/**'
            include 'io/warp10/WarpConfig.*'
            include 'io/warp10/WarpConfig$1.*'
            include 'io/warp10/WarpHexDecoder.*'
            include 'io/warp10/WarpManager.*'
            include 'io/warp10/WarpURLEncoder.*'
            include 'io/warp10/WarpURLDecoder.*'
            include 'io/warp10/DoubleUtils.*'
            include 'io/warp10/FloatUtils.*'
            include 'io/warp10/WrapperList.*'
            include 'io/warp10/WrapperList$ArrayItr.*'
            include 'io/warp10/Revision.*'
            include 'io/warp10/ThrowableUtils.*'
            include 'io/warp10/continuum/AuthenticationPlugin.*'
            include 'io/warp10/continuum/MetadataUtils.*'
            include 'io/warp10/continuum/MetadataUtils$*'
            include 'io/warp10/continuum/index/**'
            include 'io/warp10/continuum/Configuration.*'
            include 'io/warp10/continuum/TimeSource.*'
            include 'io/warp10/continuum/TimeSource$*'
            include 'io/warp10/continuum/TextFileShuffler.*'
            include 'io/warp10/continuum/TextFileShuffler$*'
            include 'io/warp10/continuum/SortUtil.*'
            include 'io/warp10/continuum/SortUtil$*'
            include 'io/warp10/continuum/Tokens.*'
            include 'io/warp10/continuum/Tokens$*'
            include 'io/warp10/continuum/gts/**'
            include 'io/warp10/continuum/store/Constants.*'
            include 'io/warp10/continuum/store/DirectoryClient.*'
            include 'io/warp10/continuum/store/GTSDecoderIterator.*'
            include 'io/warp10/continuum/store/MetadataIterator.*'
            include 'io/warp10/warp/sdk/**'
            include 'io/warp10/continuum/sensision/SensisionConstants.*'
            include 'io/warp10/continuum/store/StoreClient.*'
            include 'io/warp10/hadoop/**'
            include 'io/warp10/standalone/AcceleratorConfig.*'
            include 'io/warp10/standalone/AcceleratorConfig$*.*'

            srcDir new File(project(':warp10').projectDir, "src/generated/thrift/gen-java")
            include 'io/warp10/continuum/thrift/data/**'
            include 'io/warp10/continuum/store/thrift/data/**'

            srcDir new File(project(':token').projectDir, "src/generated/thrift/gen-java")
            include 'io/warp10/quasar/filter/QuasarTokenFilter.*'
            include 'io/warp10/quasar/filter/exception/QuasarTokenException.*'

            srcDir new File(project(':token').projectDir, "src/main/java")
            include 'io/warp10/quasar/token/thrift/data/**'

            srcDir new File(project(':crypto').projectDir, "src/main/java")
            include 'io/warp10/crypto/**'
        }
        resources {
            srcDir new File(project(':warp10').projectDir, "src/main/resources")
            include('REVISION')
        }
    }
}

dependencies {
    compileOnly project(':warp10')
}

//
// Set jars title
//
tasks.withType(Jar) {
    manifest.attributes.put("Implementation-Title", "WarpScript")
}

//
// Customize POM file in maven publication
//
publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                // compute the list of dependencies
                project(":warp10").configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each {
                    directDep ->
                        addChildsToWarpscriptDeps(directDep)
                }

                def dependenciesNode = asNode().appendNode('dependencies')
                mc2DepsList.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.getModuleGroup())
                    dependencyNode.appendNode('artifactId', it.getModuleName())
                    dependencyNode.appendNode('version', it.getModuleVersion())
                }
            }
        }
    }
}

//
// Add the root dependency and all its children (transitive dependencies) to the list
//
def addChildsToWarpscriptDeps (def pResolvedDependency) {

    pResolvedDependency.children.each {
        addChildsToWarpscriptDeps(it)
    }

    // Add the dependency and its children if it has not been seen before and if this dependency is required by Warpscript
    String depName = pResolvedDependency.getModuleName()
    if(!mc2DepsIndex.contains(depName) && isDepRequired(depName)) {
        mc2DepsIndex << depName
        mc2DepsList << pResolvedDependency
    }
}

boolean isDepRequired(String currentDep ) {
    return ext.requiredLibsMc2.any { currentDep.equalsIgnoreCase(it as String) }
}
