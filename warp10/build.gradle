//
//   Copyright 2018-2020  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

// Only the warp10 subproject uses changelog, so apply the plugin here.
plugins {
    id "com.selesse.git.changelog" version "0.3.0"
}

//
// Configurations
//
configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        java {
            srcDirs 'src/generated/thrift/gen-java'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
}

dependencies {
    //
    // io.warp10 dependencies
    //
    api project(':crypto')
    api project(':token')
    api 'io.warp10:sensision:1.0.21'

    api 'joda-time:joda-time:2.2'
    api 'org.apache.commons:commons-lang3:3.6'
    api 'org.apache.commons:commons-math3:3.6'
    api 'org.bouncycastle:bcprov-jdk16:1.46'

    //
    // Processing
    //
    api 'org.processing:core:3.0'

    //
    // Commons CLI
    //
    api 'commons-cli:commons-cli:1.3.1'

    //
    // HBase 1.0.0
    //
    api 'org.apache.hbase:hbase-client:1.0.0'
    api 'org.apache.hbase:hbase-examples:1.0.0'
    api 'org.apache.hbase:hbase-common:1.0.0'
    api 'org.apache.hbase:hbase-protocol:1.0.0'

    api 'org.eclipse.jetty:jetty-server:9.4.2.v20170220'
    api 'org.eclipse.jetty.websocket:websocket-server:9.4.2.v20170220'
    api 'org.eclipse.jetty.websocket:websocket-client:9.4.2.v20170220'
    api 'com.netflix.curator:curator-x-discovery:1.3.3'
    api 'com.fasterxml.jackson.core:jackson-databind:2.10.2'
    api 'org.slf4j:slf4j-api:1.7.5'

    //
    // FFT
    //
    api 'com.github.rwl:jtransforms:2.4.0'

    //
    // Pyrolite
    //
    api 'net.razorvine:pyrolite:4.10'

    //
    // LevelDB
    //
    api 'org.fusesource.leveldbjni:leveldbjni-all:1.8'
    // https://mvnrepository.com/artifact/org.openlabtesting.leveldbjni/leveldbjni-linux64-aarch64
    api group: 'org.openlabtesting.leveldbjni', name: 'leveldbjni-linux64-aarch64', version: '1.8'

    api 'org.iq80.leveldb:leveldb:0.12:uber'

    //
    // Worf
    //
    api 'jline:jline:2.13'

    //
    // Mustache
    //
    api 'com.github.spullara.mustache.java:compiler:0.9.1'

    //
    // Geo
    //
    api 'com.geoxp:geoxplib:1.0.0'
    api 'org.wololo:jts2geojson:0.10.0'

    //
    // Java Merge Sort
    //
    api 'com.fasterxml.util:java-merge-sort:1.0.0'

    // @see http://www.mail-archive.com/dev@kafka.apache.org/msg03829.html
    api('org.apache.kafka:kafka_2.11:0.8.2.2') {
        exclude module: 'jms'
        exclude module: 'jmxtools'
        exclude module: 'jmxri'
    }
    testCompileOnly 'junit:junit:4.6'
}

task pack(type: Jar) {
    zip64 = true
    archiveAppendix = (null != System.getProperty('warp')) ? System.getProperty('warp') : ""

    manifest {
        attributes(
            "Main-Class": "io.warp10.standalone.Warp",
            "Implementation-Title": "Warp 10",
            "Implementation-Vendor": "Warp 10",
            "Implementation-Version": project.version
        )
    }

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.resources.srcDirs)
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude { it.toString().contains('/servlet-api') }
                exclude { it.toString().contains('junit') }
            }
        }
    } {
        exclude 'META-INF/*.DSA'
        exclude 'about.html'
        exclude 'jetty-dir.css'
    }
}

//
// Exec task to create the Warp 10 tar.gz file
//
task createTarArchive(type: Exec, dependsOn: pack) {
    workingDir = '.'
    commandLine = ["${workingDir}/src/main/sh/package.sh", version, projectDir]
    outputs.file "${buildDir}/libs/warp10-${version}.tar.gz"
}

//
// Set jar title
//
jar.manifest.attributes.put("Implementation-Title", "Warp 10")

//
// Configure bintray artifacts, repo and name.
//
bintray {
    // Not uploaded to a maven repo, so just copy the jar.
    filesSpec {
        from createTarArchive
        into project.group.replaceAll('\\.', '/') + "/$project.name/$project.version"
    }

    pkg {
        repo = 'generic'
        name = project.name
    }
}

changelog {
    // The title appears at the top of the changelog.
    // Default value: the name of the project.
    title = "${project.name} - Changelog"

    // The output directory where the report is generated.
    // Default value: main resource directory, or the "build" directory
    outputDirectory = file("${project.buildDir}")

    // The name of the report to generate.
    // Default value: CHANGELOG.md
    fileName = "changelog.txt"

    // The range of commits the changelog should be composed of.
    // Default value: 'beginning' (i.e. full changelog)
    // Possible values: 'beginning', 'last_tag', 'xxx'
    //
    // 'last_tag' will use all the commits since the last tag,
    // 'beginning' will use all commits since the initial commit (default)
    // 'xxx' will use all the tags since the 'xxx' Git reference (i.e. `since = 1.2.0` will display the changelog
    //       since the 1.2.0 tag, excluding 1.2.0)
    since = 'beginning'

    // The output formats that should be generated.
    // Default value: ['markdown']
    // Possible values: 'html', 'markdown'.
    formats = ['html', 'markdown']

    // The Git "pretty" changelog commit format.
    // Default value: %ad%x09%s (%an), which produces:
    // Thu May 7 20:10:33 2015 -0400    Initial commit (Alex Selesse)
    commitFormat = '%ad%x09%s'

    // Specifies a commit format for Markdown.
    // Default value: '* %s (%an)', which produces:
    // * Initial commit (Alex Selesse)
    markdown {
        commitFormat = '* %s'
    }

    // Specifies a commit format for the HTML template.
    // Default value: see commitFormat
    html {
        commitFormat = '%s'
    }

    // A closure that returns 'true' if the line should be included in the changelog.
    // Default value: accept everything, { true }
    includeLines = {
        !it.contains("Merge")
    }
}

//
// Tasks dependencies
//
compileJava.dependsOn generateThrift
pack.dependsOn generateChangelog
